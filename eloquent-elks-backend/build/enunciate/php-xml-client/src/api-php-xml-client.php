<?php

/**
 *
 * 
 *
 * Generated by <a href="http://enunciate.webcohesion.com">Enunciate</a>.
 *
 */
 

namespace Com\Airbnb\Eloquentelksbackend\DTO;

/**
 * (no documentation provided)
 */
class PropertyFetchDTO
{

    /**
     * Constructs a PropertyFetchDTO from an XMLReader
     *
     * @param \XMLReader $reader The reader.
     */
    public function __construct($reader = null)
    {
        $success = true;
        while ($success && $reader->nodeType != \XMLReader::ELEMENT) {
            $success = $reader->read();
        }
        if ($reader->nodeType != \XMLReader::ELEMENT) {
            throw new \Exception("Unable to read XML: no start element found.");
        }

        $this->initFromReader($reader);
    }


    /**
     * Initializes this PropertyFetchDTO from an XML reader.
     *
     * @param \XMLReader $xml The reader to use to initialize this object.
     */
    public function initFromReader($xml)
    {
        $empty = $xml->isEmptyElement;

        if ($xml->hasAttributes) {
            $moreAttributes = $xml->moveToFirstAttribute();
            while ($moreAttributes) {
                if (!$this->setKnownAttribute($xml)) {
                    //skip unknown attributes...
                }
                $moreAttributes = $xml->moveToNextAttribute();
            }
        }

        if (!$empty) {
            $xml->read();
            while ($xml->nodeType != \XMLReader::END_ELEMENT) {
                if ($xml->nodeType != \XMLReader::ELEMENT) {
                    //no-op: skip any insignificant whitespace, comments, etc.
                }
                else if (!$xml->isEmptyElement && !$this->setKnownChildElement($xml)) {
                    $d = $xml->depth;
                    $n = $xml->localName;
                    $ns = $xml->namespaceURI;
                    //skip the unknown element
                    while ($xml->read() && !$this->hasSameValue($d, $xml->depth, false) && !$this->hasSameValue($n, $xml->localName) && !$this->hasSameValue($ns, $xml->namespaceURI));
                }
                $xml->read(); //advance the reader.
            }
        }
    }


    /**
     * Evaluates if two values are the same using strict comparison.
     * 
     * @param mixed $n1 the first value
     * @param mixed $n2 the second value
     * @param boolean $evaluateTwoEmptyValuesToFalse treat two empty values (as
     * deemed empty by <code>empty()</code> as not equal. This is useful when
     * comparing text nodes (which does not have a name) or empty namespace.
     * @return boolean a <code>boolean</code> indicating if the two values are
     * are the same using the strict '===' operator.
     */
    private function hasSameValue($n1, $n2, $evaluateTwoEmptyValuesToFalse = true) {
      if ($evaluateTwoEmptyValuesToFalse && empty($n1) && empty($n2)) {
        return false;
      }
    
      return $n1 === $n2;
    }

    /**
     * Sets a known child element of PropertyFetchDTO from an XML reader.
     *
     * @param \XMLReader $xml The reader.
     * @return bool Whether a child element was set.
     */
    protected function setKnownChildElement($xml) {
        return false;
    }

    /**
     * Sets a known attribute of PropertyFetchDTO from an XML reader.
     *
     * @param \XMLReader $xml The reader.
     * @return bool Whether an attribute was set.
     */
    protected function setKnownAttribute($xml) {

        return false;
    }

    /**
     * Writes the contents of this PropertyFetchDTO to an XML writer. The startElement is expected to be already provided.
     *
     * @param \XMLWriter $writer The XML writer.
     */
    public function writeXmlContents($writer)
    {
    }
}
